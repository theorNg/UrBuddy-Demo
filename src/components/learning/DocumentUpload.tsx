import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Upload, FileText, Plus } from "lucide-react";

interface Question {
  id: string;
  question: string;
  answer: string;
}

interface Document {
  id: string;
  name: string;
  uploadDate: string;
  questions: Question[];
}

export function DocumentUpload() {
  const [documents, setDocuments] = useState<Document[]>([]);
  const [selectedDocument, setSelectedDocument] = useState<Document | null>(
    null
  );

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // In a real application, this would upload the file to a server
      const newDocument: Document = {
        id: Math.random().toString(36).substr(2, 9),
        name: file.name,
        uploadDate: new Date().toISOString().split("T")[0],
        questions: [], // Would be generated by AI in a real application
      };
      setDocuments([...documents, newDocument]);
    }
  };

  const generateQuestions = (documentId: string) => {
    // In a real application, this would call an AI service to generate questions
    const mockQuestions: Question[] = [
      {
        id: "1",
        question: "What is the main topic of this document?",
        answer: "The answer would be generated based on the document content.",
      },
      {
        id: "2",
        question: "What are the key points discussed?",
        answer: "The answer would be generated based on the document content.",
      },
    ];

    setDocuments(
      documents.map((doc) =>
        doc.id === documentId ? { ...doc, questions: mockQuestions } : doc
      )
    );
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Learning Materials</CardTitle>
          <CardDescription>
            Upload documents and generate practice questions
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            <div>
              <Label htmlFor="document">Upload Document</Label>
              <div className="mt-2">
                <Input
                  id="document"
                  type="file"
                  accept=".pdf,.doc,.docx,.txt"
                  onChange={handleFileUpload}
                  className="hidden"
                />
                <label
                  htmlFor="document"
                  className="flex items-center justify-center w-full h-32 px-4 transition bg-white border-2 border-gray-300 border-dashed rounded-md appearance-none cursor-pointer hover:border-gray-400 focus:outline-none"
                >
                  <div className="flex flex-col items-center space-y-2">
                    <Upload className="w-8 h-8 text-gray-400" />
                    <span className="text-sm text-gray-500">
                      Click to upload or drag and drop
                    </span>
                  </div>
                </label>
              </div>
            </div>

            {documents.length > 0 && (
              <div className="space-y-4">
                <h3 className="font-medium">Uploaded Documents</h3>
                <div className="grid gap-4">
                  {documents.map((doc) => (
                    <div
                      key={doc.id}
                      className="p-4 border rounded-lg hover:bg-gray-50 transition-colors"
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <FileText className="w-5 h-5" />
                          <div>
                            <p className="font-medium">{doc.name}</p>
                            <p className="text-sm text-gray-500">
                              Uploaded on {doc.uploadDate}
                            </p>
                          </div>
                        </div>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            generateQuestions(doc.id);
                            setSelectedDocument(doc);
                          }}
                        >
                          <Plus className="w-4 h-4 mr-2" />
                          Generate Questions
                        </Button>
                      </div>

                      {selectedDocument?.id === doc.id &&
                        doc.questions.length > 0 && (
                          <div className="mt-4 pl-8 space-y-3">
                            <h4 className="font-medium">Practice Questions:</h4>
                            {doc.questions.map((q) => (
                              <div key={q.id} className="space-y-1">
                                <p className="font-medium">{q.question}</p>
                                <p className="text-sm text-gray-600">
                                  {q.answer}
                                </p>
                              </div>
                            ))}
                          </div>
                        )}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
